{"files":[{"file":"clip.h","functions":["pwm_clip_set","pwm_clip_clear"],"meta":{},"lines":19},{"file":"db.h","functions":["pwm_db_new","pwm_db_free","pwm_db_clean","pwm_db_get","pwm_db_has","pwm_db_set","pwm_db_del","pwm_db_list","pwm_db_log"],"meta":{},"lines":101},{"file":"gen.h","functions":["pwm_gen_by_name"],"meta":{},"lines":72},{"file":"git.h","functions":["pwm_git_init","pwm_git_shutdown","pwm_git_new","pwm_git_free","pwm_git_clean","pwm_git_get","pwm_git_has","pwm_git_add","pwm_git_rm","pwm_git_commit","pwm_git_walk_entries","pwm_git_walk_log"],"meta":{},"lines":123},{"file":"gpg.h","functions":["pwm_gpg_init","pwm_gpg_new","pwm_gpg_free","pwm_gpg_decrypt","pwm_gpg_encrypt"],"meta":{},"lines":54},{"file":"init.h","functions":["pwm_init","pwm_shutdown"],"meta":{},"lines":8},{"file":"read.h","functions":["pwm_read_file","pwm_read_line","pwm_read_line_hidden"],"meta":{},"lines":31},{"file":"str.h","functions":["pwm_str_free","pwm_str_cpy","pwm_str_cmp","pwm_str_fmt","pwm_str_vfmt","pwm_str_read_all","pwm_str_read_line"],"meta":{},"lines":137}],"functions":{"pwm_clip_set":{"type":"function","file":"clip.h","line":12,"lineto":12,"args":[{"name":"s","type":"const pwm_str_t *","comment":"The string to write"}],"argline":"const pwm_str_t *s","sig":"const pwm_str_t *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Writes a string to the clipboard.</p>\n","comments":"","group":"clip"},"pwm_clip_clear":{"type":"function","file":"clip.h","line":19,"lineto":19,"args":[],"argline":"","sig":"","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Clears the clipboard.</p>\n","comments":"","group":"clip"},"pwm_db_new":{"type":"function","file":"db.h","line":22,"lineto":22,"args":[{"name":"out","type":"pwm_db_t **","comment":"Pointer to store the allocated database in"},{"name":"home","type":"const char *","comment":"Optional path to a pwm database"},{"name":"key_id","type":"const char *","comment":"Optional key id used to determine the GPG recipient"}],"argline":"pwm_db_t **out, const char *home, const char *key_id","sig":"pwm_db_t **::const char *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Allocates a new database.</p>\n","comments":"","group":"db"},"pwm_db_free":{"type":"function","file":"db.h","line":29,"lineto":29,"args":[{"name":"db","type":"pwm_db_t *","comment":"Database pointer"}],"argline":"pwm_db_t *db","sig":"pwm_db_t *","return":{"type":"void","comment":null},"description":"<p>Frees a database.</p>\n","comments":"","group":"db"},"pwm_db_clean":{"type":"function","file":"db.h","line":38,"lineto":38,"args":[{"name":"db","type":"pwm_db_t *","comment":"Database pointer"}],"argline":"pwm_db_t *db","sig":"pwm_db_t *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Cleans up a database. Call this after changing the database to cleanup\n after failed operations.</p>\n","comments":"","group":"db"},"pwm_db_get":{"type":"function","file":"db.h","line":49,"lineto":49,"args":[{"name":"db","type":"pwm_db_t *","comment":"Database pointer"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"key","type":"const char *","comment":"Key of the database entry"},{"name":"dst","type":"pwm_str_t *","comment":"String pointer to store the result in"}],"argline":"pwm_db_t *db, const char *dir, const char *key, pwm_str_t *dst","sig":"pwm_db_t *::const char *::const char *::pwm_str_t *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Retrieves a database entry.</p>\n","comments":"","group":"db"},"pwm_db_has":{"type":"function","file":"db.h","line":59,"lineto":59,"args":[{"name":"db","type":"pwm_db_t *","comment":"Database pointer"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"key","type":"const char *","comment":"Key of the database entry"}],"argline":"pwm_db_t *db, const char *dir, const char *key","sig":"pwm_db_t *::const char *::const char *","return":{"type":"int","comment":" 1 if the entry exists else 0"},"description":"<p>Checks the existence of a database entry.</p>\n","comments":"","group":"db"},"pwm_db_set":{"type":"function","file":"db.h","line":71,"lineto":71,"args":[{"name":"db","type":"pwm_db_t *","comment":"Database pointer"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"key","type":"const char *","comment":"Key of the database entry"},{"name":"msg","type":"const char *","comment":"Optional log message"},{"name":"src","type":"const pwm_str_t *","comment":"String pointer containing the value to store"}],"argline":"pwm_db_t *db, const char *dir, const char *key, const char *msg, const pwm_str_t *src","sig":"pwm_db_t *::const char *::const char *::const char *::const pwm_str_t *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Sets a database entry.</p>\n","comments":"","group":"db"},"pwm_db_del":{"type":"function","file":"db.h","line":82,"lineto":82,"args":[{"name":"db","type":"pwm_db_t *","comment":"Database pointer"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"key","type":"const char *","comment":"Key of the database entry"},{"name":"msg","type":"const char *","comment":"Optional log message"}],"argline":"pwm_db_t *db, const char *dir, const char *key, const char *msg","sig":"pwm_db_t *::const char *::const char *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Deletes a database entry.</p>\n","comments":"","group":"db"},"pwm_db_list":{"type":"function","file":"db.h","line":92,"lineto":92,"args":[{"name":"db","type":"pwm_db_t *","comment":"Database pointer"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"cb","type":"pwm_git_walk_entries_cb","comment":"Function to call on each database entry"}],"argline":"pwm_db_t *db, const char *dir, pwm_git_walk_entries_cb cb","sig":"pwm_db_t *::const char *::pwm_git_walk_entries_cb","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Lists all keys in a directory.</p>\n","comments":"","group":"db"},"pwm_db_log":{"type":"function","file":"db.h","line":101,"lineto":101,"args":[{"name":"db","type":"pwm_db_t *","comment":"Database pointer"},{"name":"cb","type":"pwm_git_walk_log_cb","comment":"Function to call on each log entry"}],"argline":"pwm_db_t *db, pwm_git_walk_log_cb cb","sig":"pwm_db_t *::pwm_git_walk_log_cb","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Lists all log entries.</p>\n","comments":"","group":"db"},"pwm_gen_by_name":{"type":"function","file":"gen.h","line":72,"lineto":72,"args":[{"name":"name","type":"const char *","comment":"The name of the generator"}],"argline":"const char *name","sig":"const char *","return":{"type":"const pwm_gen_t *","comment":" The generator or NULL if no generator was found"},"description":"<p>Finds a generator by name.</p>\n","comments":"","group":"gen"},"pwm_git_init":{"type":"function","file":"git.h","line":20,"lineto":20,"args":[],"argline":"","sig":"","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Initializes git. Do not call this directly - use pwm_init().</p>\n","comments":"","group":"git"},"pwm_git_shutdown":{"type":"function","file":"git.h","line":23,"lineto":23,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Shuts down git </p>\n","comments":"","group":"git"},"pwm_git_new":{"type":"function","file":"git.h","line":32,"lineto":32,"args":[{"name":"out","type":"pwm_git_t **","comment":"Pointer to store the allocated handler in"},{"name":"path","type":"const char *","comment":"Optional path to the git repo"}],"argline":"pwm_git_t **out, const char *path","sig":"pwm_git_t **::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Allocates a new git handler.</p>\n","comments":"","group":"git"},"pwm_git_free":{"type":"function","file":"git.h","line":39,"lineto":39,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"}],"argline":"pwm_git_t *git","sig":"pwm_git_t *","return":{"type":"void","comment":null},"description":"<p>Frees a git handler.</p>\n","comments":"","group":"git"},"pwm_git_clean":{"type":"function","file":"git.h","line":47,"lineto":47,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"}],"argline":"pwm_git_t *git","sig":"pwm_git_t *","return":{"type":"int","comment":null},"description":"<p>Cleans up a git repo. Call this after changing the git repo to cleanup\n after failed operations.</p>\n","comments":"","group":"git"},"pwm_git_get":{"type":"function","file":"git.h","line":58,"lineto":58,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"key","type":"const char *","comment":"Key of the blob"},{"name":"s","type":"pwm_str_t *","comment":"String pointer to store blobs contents in"}],"argline":"pwm_git_t *git, const char *dir, const char *key, pwm_str_t *s","sig":"pwm_git_t *::const char *::const char *::pwm_str_t *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Retrieves a blob from a directory.</p>\n","comments":"","group":"git"},"pwm_git_has":{"type":"function","file":"git.h","line":68,"lineto":68,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"key","type":"const char *","comment":"Key of the blob"}],"argline":"pwm_git_t *git, const char *dir, const char *key","sig":"pwm_git_t *::const char *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Checks if blob exists in a directory.</p>\n","comments":"","group":"git"},"pwm_git_add":{"type":"function","file":"git.h","line":79,"lineto":79,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"key","type":"const char *","comment":"Key of the blob"},{"name":"s","type":"const pwm_str_t *","comment":"String pointer with blobs contents"}],"argline":"pwm_git_t *git, const char *dir, const char *key, const pwm_str_t *s","sig":"pwm_git_t *::const char *::const char *::const pwm_str_t *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Adds a blob to a directory.</p>\n","comments":"","group":"git"},"pwm_git_rm":{"type":"function","file":"git.h","line":89,"lineto":89,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"key","type":"const char *","comment":"Key of the blob"}],"argline":"pwm_git_t *git, const char *dir, const char *key","sig":"pwm_git_t *::const char *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Removes a blob from a directory.</p>\n","comments":"","group":"git"},"pwm_git_commit":{"type":"function","file":"git.h","line":98,"lineto":98,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"},{"name":"msg","type":"const char *","comment":"A commit message"}],"argline":"pwm_git_t *git, const char *msg","sig":"pwm_git_t *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Commits all changes in the git tree.</p>\n","comments":"","group":"git"},"pwm_git_walk_entries":{"type":"function","file":"git.h","line":111,"lineto":111,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"},{"name":"dir","type":"const char *","comment":"Name of the directory"},{"name":"cb","type":"pwm_git_walk_entries_cb","comment":"Function to call on each entry"}],"argline":"pwm_git_t *git, const char *dir, pwm_git_walk_entries_cb cb","sig":"pwm_git_t *::const char *::pwm_git_walk_entries_cb","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Walks all entries in a directory.</p>\n","comments":"","group":"git"},"pwm_git_walk_log":{"type":"function","file":"git.h","line":123,"lineto":123,"args":[{"name":"git","type":"pwm_git_t *","comment":"The git handler"},{"name":"cd","type":"pwm_git_walk_log_cb","comment":null}],"argline":"pwm_git_t *git, pwm_git_walk_log_cb cd","sig":"pwm_git_t *::pwm_git_walk_log_cb","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Walks all log entries.</p>\n","comments":"","group":"git"},"pwm_gpg_init":{"type":"function","file":"gpg.h","line":18,"lineto":18,"args":[],"argline":"","sig":"","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Initializes GPG. Do not call this directly - use pwm_init().</p>\n","comments":"","group":"gpg"},"pwm_gpg_new":{"type":"function","file":"gpg.h","line":27,"lineto":27,"args":[{"name":"out","type":"pwm_gpg_t **","comment":"GPG pointer to store the allocated handler in"},{"name":"key_id","type":"const char *","comment":"Optional key id used to determine the GPG recipient"}],"argline":"pwm_gpg_t **out, const char *key_id","sig":"pwm_gpg_t **::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Allocates a new GPG handler.</p>\n","comments":"","group":"gpg"},"pwm_gpg_free":{"type":"function","file":"gpg.h","line":34,"lineto":34,"args":[{"name":"gpg","type":"pwm_gpg_t *","comment":"The GPG handler"}],"argline":"pwm_gpg_t *gpg","sig":"pwm_gpg_t *","return":{"type":"void","comment":null},"description":"<p>Frees a GPG handler.</p>\n","comments":"","group":"gpg"},"pwm_gpg_decrypt":{"type":"function","file":"gpg.h","line":44,"lineto":44,"args":[{"name":"gpg","type":"pwm_gpg_t *","comment":"The GPG handler"},{"name":"dst","type":"pwm_str_t *","comment":"The string pointer to store the result in"},{"name":"src","type":"const pwm_str_t *","comment":"The string to decrypt"}],"argline":"pwm_gpg_t *gpg, pwm_str_t *dst, const pwm_str_t *src","sig":"pwm_gpg_t *::pwm_str_t *::const pwm_str_t *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Decrypts a string.</p>\n","comments":"","group":"gpg"},"pwm_gpg_encrypt":{"type":"function","file":"gpg.h","line":54,"lineto":54,"args":[{"name":"gpg","type":"pwm_gpg_t *","comment":"The GPG handler"},{"name":"dst","type":"pwm_str_t *","comment":"The string pointer to store the result in"},{"name":"src","type":"const pwm_str_t *","comment":"The string to encrypt"}],"argline":"pwm_gpg_t *gpg, pwm_str_t *dst, const pwm_str_t *src","sig":"pwm_gpg_t *::pwm_str_t *::const pwm_str_t *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Encrypts a string.</p>\n","comments":"","group":"gpg"},"pwm_init":{"type":"function","file":"init.h","line":5,"lineto":5,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Initializes the pwm library. Call this before doing anything. </p>\n","comments":"","group":"init"},"pwm_shutdown":{"type":"function","file":"init.h","line":8,"lineto":8,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Shuts down the pwm library. Call this, when you are done. </p>\n","comments":"","group":"init"},"pwm_read_file":{"type":"function","file":"read.h","line":13,"lineto":13,"args":[{"name":"s","type":"pwm_str_t *","comment":"String pointer to store the result in"},{"name":"path","type":"const char *","comment":"Path to the file"}],"argline":"pwm_str_t *s, const char *path","sig":"pwm_str_t *::const char *","return":{"type":"int","comment":" 0 on success or an error code."},"description":"<p>Reads the contents of a file.</p>\n","comments":"","group":"read"},"pwm_read_line":{"type":"function","file":"read.h","line":22,"lineto":22,"args":[{"name":"s","type":"pwm_str_t *","comment":"String pointer to store the result in"},{"name":"prompt","type":"const char *","comment":"Prompt to show"}],"argline":"pwm_str_t *s, const char *prompt","sig":"pwm_str_t *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Reads a line from stdin.</p>\n","comments":"","group":"read"},"pwm_read_line_hidden":{"type":"function","file":"read.h","line":31,"lineto":31,"args":[{"name":"s","type":"pwm_str_t *","comment":"String pointer to store the result in"},{"name":"prompt","type":"const char *","comment":"Prompt to show"}],"argline":"pwm_str_t *s, const char *prompt","sig":"pwm_str_t *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Reads a line from stdin without printing the entered characters.</p>\n","comments":"","group":"read"},"pwm_str_free":{"type":"function","file":"str.h","line":33,"lineto":33,"args":[{"name":"s","type":"pwm_str_t *","comment":"String pointer"}],"argline":"pwm_str_t *s","sig":"pwm_str_t *","return":{"type":"void","comment":null},"description":"<p>Frees the string buffer.</p>\n","comments":"<p>Note: This function only frees the internal buffer of the string, not the\n string itself.</p>\n","group":"str"},"pwm_str_cpy":{"type":"function","file":"str.h","line":51,"lineto":51,"args":[{"name":"dst","type":"pwm_str_t *","comment":"String pointer to store the result"},{"name":"src","type":"pwm_str_t *","comment":"String pointer to copy\n return 0 on success or an error code"}],"argline":"pwm_str_t *dst, pwm_str_t *src","sig":"pwm_str_t *::pwm_str_t *","return":{"type":"int","comment":null},"description":"<p>Copies a string.</p>\n","comments":"","group":"str"},"pwm_str_cmp":{"type":"function","file":"str.h","line":98,"lineto":98,"args":[{"name":"a","type":"pwm_str_t *","comment":"A string pointer"},{"name":"b","type":"pwm_str_t *","comment":"Another string pointer"}],"argline":"pwm_str_t *a, pwm_str_t *b","sig":"pwm_str_t *::pwm_str_t *","return":{"type":"int","comment":" 0 if the a and b are equal - see man memcmp for more info"},"description":"<p>Compares two strings with each other.</p>\n","comments":"","group":"str"},"pwm_str_fmt":{"type":"function","file":"str.h","line":108,"lineto":108,"args":[{"name":"s","type":"pwm_str_t *","comment":"String pointer"},{"name":"fmt","type":"const char *","comment":"Format string (see printf man page)"}],"argline":"pwm_str_t *s, const char *fmt","sig":"pwm_str_t *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Formats a string printf style.</p>\n","comments":"","group":"str"},"pwm_str_vfmt":{"type":"function","file":"str.h","line":119,"lineto":119,"args":[{"name":"s","type":"pwm_str_t *","comment":"String pointer"},{"name":"fmt","type":"const char *","comment":"Format string (see printf man page)"},{"name":"ap","type":"va_list","comment":"Variable argument list (see stdarg man page)"}],"argline":"pwm_str_t *s, const char *fmt, va_list ap","sig":"pwm_str_t *::const char *::va_list","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Same as pwm_str_fmt, but takes a va_list instead of a variable number of\n arguments.</p>\n","comments":"","group":"str"},"pwm_str_read_all":{"type":"function","file":"str.h","line":128,"lineto":128,"args":[{"name":"s","type":"pwm_str_t *","comment":"String pointer to store the result in"},{"name":"fd","type":"int","comment":"File descriptor to read from"}],"argline":"pwm_str_t *s, int fd","sig":"pwm_str_t *::int","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Reads from a file descriptor until EOF.</p>\n","comments":"","group":"str"},"pwm_str_read_line":{"type":"function","file":"str.h","line":137,"lineto":137,"args":[{"name":"s","type":"pwm_str_t *","comment":"String pointer to store the result in"},{"name":"stream","type":"FILE *","comment":"The stream to read from"}],"argline":"pwm_str_t *s, FILE *stream","sig":"pwm_str_t *::FILE *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Reads a line from a stream.</p>\n","comments":"","group":"str"}},"globals":{},"types":[["pwm_db_t",{"decl":["pwm_git_t * git","pwm_gpg_t * gpg"],"type":"struct","value":"pwm_db_t","file":"db.h","line":9,"lineto":12,"block":"pwm_git_t * git\npwm_gpg_t * gpg","tdef":"typedef","description":" Representation of a pwm database. ","comments":"","fields":[{"type":"pwm_git_t *","name":"git","comments":""},{"type":"pwm_gpg_t *","name":"gpg","comments":""}],"used":{"returns":[],"needs":["pwm_db_clean","pwm_db_del","pwm_db_free","pwm_db_get","pwm_db_has","pwm_db_list","pwm_db_log","pwm_db_new","pwm_db_set"]}}],["pwm_gen_t",{"decl":["const char * name","const char * desc","int (*)(pwm_str_t *, int) func"],"type":"struct","value":"pwm_gen_t","file":"gen.h","line":7,"lineto":11,"block":"const char * name\nconst char * desc\nint (*)(pwm_str_t *, int) func","tdef":"typedef","description":" Representation of a generator. ","comments":"","fields":[{"type":"const char *","name":"name","comments":""},{"type":"const char *","name":"desc","comments":""},{"type":"int (*)(pwm_str_t *, int)","name":"func","comments":""}],"used":{"returns":["pwm_gen_by_name"],"needs":[]}}],["pwm_git_t",{"decl":["git_repository * repo","git_signature * sig","git_tree * tree","int dirty"],"type":"struct","value":"pwm_git_t","file":"git.h","line":8,"lineto":13,"block":"git_repository * repo\ngit_signature * sig\ngit_tree * tree\nint dirty","tdef":"typedef","description":" Git handler ","comments":"","fields":[{"type":"git_repository *","name":"repo","comments":""},{"type":"git_signature *","name":"sig","comments":""},{"type":"git_tree *","name":"tree","comments":""},{"type":"int","name":"dirty","comments":""}],"used":{"returns":[],"needs":["pwm_git_add","pwm_git_clean","pwm_git_commit","pwm_git_free","pwm_git_get","pwm_git_has","pwm_git_new","pwm_git_rm","pwm_git_walk_entries","pwm_git_walk_log"]}}],["pwm_gpg_t",{"decl":["gpgme_ctx_t ctx","gpgme_key_t [2] keys"],"type":"struct","value":"pwm_gpg_t","file":"gpg.h","line":8,"lineto":11,"block":"gpgme_ctx_t ctx\ngpgme_key_t [2] keys","tdef":"typedef","description":" GPG handler ","comments":"","fields":[{"type":"gpgme_ctx_t","name":"ctx","comments":""},{"type":"gpgme_key_t [2]","name":"keys","comments":""}],"used":{"returns":[],"needs":["pwm_gpg_decrypt","pwm_gpg_encrypt","pwm_gpg_free","pwm_gpg_new"]}}]],"prefix":"lib","groups":[["clip",["pwm_clip_clear","pwm_clip_set"]],["db",["pwm_db_clean","pwm_db_del","pwm_db_free","pwm_db_get","pwm_db_has","pwm_db_list","pwm_db_log","pwm_db_new","pwm_db_set"]],["gen",["pwm_gen_by_name"]],["git",["pwm_git_add","pwm_git_clean","pwm_git_commit","pwm_git_free","pwm_git_get","pwm_git_has","pwm_git_init","pwm_git_new","pwm_git_rm","pwm_git_shutdown","pwm_git_walk_entries","pwm_git_walk_log"]],["gpg",["pwm_gpg_decrypt","pwm_gpg_encrypt","pwm_gpg_free","pwm_gpg_init","pwm_gpg_new"]],["init",["pwm_init","pwm_shutdown"]],["read",["pwm_read_file","pwm_read_line","pwm_read_line_hidden"]],["str",["pwm_str_cmp","pwm_str_cpy","pwm_str_fmt","pwm_str_free","pwm_str_read_all","pwm_str_read_line","pwm_str_vfmt"]]]}